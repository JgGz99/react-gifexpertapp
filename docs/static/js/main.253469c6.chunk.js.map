{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","Hooks/useFetchGifs.js","components/GifExpertApp.js","index.js"],"names":["AddCategory","categoria","setCategoria","useState","anime","setAnime","onSubmit","e","preventDefault","trim","length","document","querySelector","reset","className","type","onChange","target","value","placeholder","getGif","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","console","log","GifGridItem","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGif","GifExpertApp","i","ReactDOM","render","getElementById"],"mappings":"6MA4CeA,EAxCK,SAAC,GAA8B,IAA7BC,EAA4B,EAA5BA,UAAUC,EAAkB,EAAlBA,aAG5B,EAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KAiBA,OACI,qCACI,6CACA,sBAAMC,SAdC,SAACC,GAGZ,GAFAA,EAAEC,iBAECJ,EAAMK,OAAOC,OAAO,EAGnB,OAFAR,EAAa,CAACE,GAAF,mBAAWH,UACvBU,SAASC,cAAc,QAAQC,SAS/B,SACI,qBAAKC,UAAU,6BAAf,SACI,qBAAKA,UAAU,WAAf,SACA,uBAAOA,UAAU,eAAeC,KAAK,OAAOC,SArB1C,SAACT,GACfF,EAASE,EAAEU,OAAOC,QAoB2DC,YAAY,uC,+BC9BpFC,EAAM,uCAAG,WAAOnB,GAAP,uBAAAoB,EAAA,4DACN,mCACNC,EAFY,iDAEoCC,UAAUtB,GAF9C,6BACN,oCADM,kBAMKuB,MAAMF,GANX,cAMRG,EANQ,gBAOSA,EAAKC,OAPd,uBAONC,EAPM,EAONA,KAEFC,EAAOD,EAAKE,KAAI,SAAAC,GAClB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAKQ,EAAIG,OAAOC,iBAAiBZ,QAb3B,kBAgBPM,GAhBO,kCAkBdO,QAAQC,IAAR,MAlBc,0DAAH,sDCENC,EAAc,SAAC,GAAoB,IAAlBL,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IACjC,OACI,qBAAKR,UAAU,WAAf,SACI,sBAAKA,UAAU,OAAf,UACA,qBAAKA,UAAU,eAAewB,IAAKhB,EAAKiB,IAAKP,IAC7C,qBAAKlB,UAAU,YAAf,SACI,mBAAGA,UAAU,YAAb,SAA0BkB,YC6B3BQ,EAhCC,SAAC,GAAmB,IAAjBvC,EAAgB,EAAhBA,UAIf,ECNuB,SAACA,GACxB,MAA0BE,mBAAS,CAC/BwB,KAAM,GACNc,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAiBA,OAZAC,qBAAU,WACNxB,EAAOnB,GACF4C,MAAK,SAAAC,GAEEH,EAAS,CACLhB,KAAMmB,EACNL,SAAS,SAI1B,CAACxC,IAEGyC,EDZ2BK,CAAY9C,GAAhCgC,EAAd,EAAQN,KAAcc,EAAtB,EAAsBA,QAEtB,OACI,sBAAK3B,UAAW,YAAhB,UACI,6BAAKb,IACJwC,EACG,sBAAK3B,UAAU,eAAf,UACA,qBAAKA,UAAU,qBACf,qBAAKA,UAAU,qBACf,qBAAKA,UAAU,qBACf,qBAAKA,UAAU,qBACf,qBAAKA,UAAU,qBACf,qBAAKA,UAAU,qBACf,qBAAKA,UAAU,qBACf,qBAAKA,UAAU,qBACf,qBAAKA,UAAU,wBACV,KACT,qBAAKA,UAAU,MAAf,SAEKmB,EAAOJ,KAAI,SAACC,GACT,OAAO,cAAC,EAAD,eAA8BA,GAAZA,EAAIC,aEGlCiB,EA7BO,WAGtB,MAAkC7C,mBAAS,CAAC,KAA5C,mBAAOF,EAAP,KAAkBC,EAAlB,KAMI,OACI,qCACI,8CACA,uBACA,cAAC,EAAD,CAAaD,UAAWA,EACZC,aAAeA,IAE3B,6BAEID,EAAU4B,KAAI,SAAC5B,EAAUgD,GAAX,OACN,cAAC,EAAD,CAEAhD,UAAWA,GADNgD,YClB7BC,IAASC,OACL,cAAC,EAAD,IAEFxC,SAASyC,eAAe,W","file":"static/js/main.253469c6.chunk.js","sourcesContent":["import React,{useState} from 'react';\r\nimport PropTypes from 'prop-types'\r\n\r\n\r\nconst AddCategory = ({categoria,setCategoria}) => {\r\n\r\n\r\n    const [anime, setAnime] = useState('');\r\n\r\n    const leerAnime = (e)=>{\r\n        setAnime(e.target.value)\r\n    }\r\n\r\n   const handleAdd=(e)=>{\r\n        e.preventDefault();\r\n\r\n        if(anime.trim().length>2){\r\n            setCategoria([anime,...categoria])\r\n            document.querySelector('form').reset();\r\n            return;\r\n        }\r\n\r\n       \r\n    }\r\n    return ( \r\n        <>\r\n            <h2>AddCategory</h2>\r\n            <form onSubmit={handleAdd}>\r\n                <div className=\"row justify-content-center\">\r\n                    <div className=\"col-md-5\">\r\n                    <input className=\"form-control\" type=\"text\" onChange={leerAnime} placeholder=\"Inserta tu anime aqui!!!\"></input>\r\n                \r\n                    </div>\r\n                </div>\r\n            </form>\r\n            \r\n        </>\r\n     );\r\n}\r\n\r\nAddCategory.propTypes={\r\n    setCategoria:PropTypes.func.isRequired\r\n}\r\n\r\nexport default AddCategory;","export const getGif = async (categoria) => {\r\n    const key = '9ufJ7yvIAYK02cSut3fhLro0vl5ZE8NS'\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(categoria)}&limit=10&api_key=${key}`;\r\n\r\n    try {\r\n\r\n        const resp = await fetch(url);\r\n        const { data } = await resp.json();\r\n\r\n        const gifs = data.map(img => {\r\n            return {\r\n                id: img.id,\r\n                title: img.title,\r\n                url: img.images.downsized_medium.url\r\n            }\r\n        })\r\n        return gifs;\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ({ title, url }) => {\r\n    return (\r\n        <div className=\"col-md-3\">\r\n            <div className=\"card\" >\r\n            <img className=\"card-img-top\" src={url} alt={title}></img>\r\n            <div className=\"card-body\">\r\n                <p className=\"card_text\">{title}</p>\r\n            </div>\r\n        </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useFetchGif } from '../Hooks/useFetchGifs'\r\n//import { getGif } from '../helpers/getGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nconst GifGrid = ({ categoria }) => {\r\n\r\n\r\n    // const [images, setImages] = useState([]);\r\n    const { data: images, loading } = useFetchGif(categoria);\r\n\r\n    return (\r\n        <div className =\"container\">\r\n            <h3>{categoria}</h3>\r\n            {loading ? \r\n                <div className=\"sk-cube-grid\">\r\n                <div className=\"sk-cube sk-cube1\"></div>\r\n                <div className=\"sk-cube sk-cube2\"></div>\r\n                <div className=\"sk-cube sk-cube3\"></div>\r\n                <div className=\"sk-cube sk-cube4\"></div>\r\n                <div className=\"sk-cube sk-cube5\"></div>\r\n                <div className=\"sk-cube sk-cube6\"></div>\r\n                <div className=\"sk-cube sk-cube7\"></div>\r\n                <div className=\"sk-cube sk-cube8\"></div>\r\n                <div className=\"sk-cube sk-cube9\"></div>\r\n            </div> : null}\r\n            <div className=\"row\">\r\n\r\n                {images.map((img) => {\r\n                    return <GifGridItem key={img.id} {...img} />\r\n                })}\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GifGrid;","import { useEffect, useState } from \"react\"\r\nimport { getGif } from \"../helpers/getGifs\";\r\n\r\nexport const useFetchGif = (categoria) => {\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect(() => {\r\n        getGif(categoria)\r\n            .then(imgs => {\r\n                \r\n                    setState({\r\n                        data: imgs,\r\n                        loading: false\r\n                    })\r\n               \r\n            });\r\n    }, [categoria])\r\n\r\n    return state\r\n}","import React,{useState} from 'react';\r\nimport AddCategory from './AddCategory';\r\nimport GifGrid from './GifGrid'\r\n const GifExpertApp = () => {\r\n\r\n// const categorias = ['One Punch','Samurai X','Dragon Ball'];\r\nconst [categoria, setCategoria] = useState(['']);\r\n\r\n// const handleAdd =()=>{\r\n//     setCategoria([...categoria,'anime']);\r\n// }\r\n\r\n    return ( \r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <hr></hr>\r\n            <AddCategory categoria={categoria}\r\n                        setCategoria ={setCategoria}\r\n            />\r\n            <ol>\r\n             {\r\n                categoria.map((categoria,i) => \r\n                        <GifGrid\r\n                        key={i}\r\n                        categoria={categoria}/>\r\n                    )\r\n             }\r\n            </ol>\r\n        </>\r\n     );\r\n}\r\n \r\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GifExpertApp from './components/GifExpertApp'\n\nReactDOM.render(\n    <GifExpertApp />,\n  \n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}